{"ast":null,"code":"var _jsxFileName = \"D:\\\\WebDev_Projects2023Dec\\\\foodCrush\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport \"./styles.css\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport ScoreBoard from \"./components/ScoreBoard\";\nimport Red from \"../src/images/red_apple.png\";\nimport Green from \"./images/potatochip_green.png\";\nimport Blue from \"./images/milk_pack.png\";\nimport Yellow from \"./images/banana.png\";\nimport Orange from \"./images/meat.png\";\nimport Purple from \"./images/egg_white.png\";\nimport Blank from \"./images/blank.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 8;\nconst colors = [Red, Blue, Yellow, Green, Purple, Orange];\nexport default function App() {\n  _s();\n  const [colorsArrange, setColorsArrange] = useState([]);\n  const [squareDragging, setSquareDragging] = useState(null);\n  const [squareReplaced, setSquareReplaced] = useState(null);\n  const [score, setScore] = useState(0);\n  const [darkMode, setDarkMode] = useState(false);\n  const checkForFourCol = () => {\n    for (let i = 0; i <= 39; i++) {\n      const col = [i, i + width, i + width * 2, i + width * 3];\n      const presentColor = colorsArrange[i];\n      const isBlank = colorsArrange[i] === Blank;\n      if (col.every(index => colorsArrange[index] === presentColor) && !isBlank) {\n        setScore(s => s + 4);\n        col.forEach(index => colorsArrange[index] = Blank);\n        return true;\n      }\n    }\n  };\n  const checkForFourRow = () => {\n    for (let i = 0; i < 64; i++) {\n      const row = [i, i + 1, i + 2, i + 3];\n      const presentColor = colorsArrange[i];\n      const isBlank = colorsArrange[i] === Blank;\n      const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64];\n      if (notValid.includes(i)) continue;\n      if (row.every(index => colorsArrange[index] === presentColor) && !isBlank) {\n        setScore(s => s + 4);\n        row.forEach(index => colorsArrange[index] = Blank);\n        return true;\n      }\n    }\n  };\n  const checkForThreeCol = () => {\n    for (let i = 0; i <= 47; i++) {\n      const col = [i, i + width, i + width * 2];\n      const presentColor = colorsArrange[i];\n      const isBlank = colorsArrange[i] === Blank;\n      if (col.every(index => colorsArrange[index] === presentColor) && !isBlank) {\n        setScore(s => s + 3);\n        col.forEach(index => colorsArrange[index] = Blank);\n        return true;\n      }\n    }\n  };\n  const checkForThreeRow = () => {\n    for (let i = 0; i < 64; i++) {\n      const row = [i, i + 1, i + 2];\n      const presentColor = colorsArrange[i];\n      const isBlank = colorsArrange[i] === Blank;\n      const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64];\n      if (notValid.includes(i)) continue;\n      if (row.every(index => colorsArrange[index] === presentColor) && !isBlank) {\n        setScore(s => s + 3);\n        row.forEach(index => colorsArrange[index] = Blank);\n        return true;\n      }\n    }\n  };\n  const moveToBelow = () => {\n    for (let i = 0; i <= 55; i++) {\n      const firstRow = [0, 1, 2, 3, 4, 5, 6, 7];\n      const isFirstRow = firstRow.includes(i);\n      if (isFirstRow && colorsArrange[i] === Blank) {\n        const randColor = Math.floor(Math.random() * colors.length);\n        colorsArrange[i] = colors[randColor];\n      }\n      if (colorsArrange[i + width] === Blank) {\n        colorsArrange[i + width] = colorsArrange[i];\n        colorsArrange[i] = Blank;\n      }\n    }\n  };\n  const dragStart = e => {\n    setSquareDragging(e.target);\n  };\n  const dragDrop = e => {\n    setSquareReplaced(e.target);\n  };\n  const dragEnd = () => {\n    const dragId = parseInt(squareDragging.getAttribute(\"dataid\"));\n    const replaceId = parseInt(squareReplaced.getAttribute(\"dataid\"));\n    colorsArrange[replaceId] = squareDragging.getAttribute(\"src\");\n    colorsArrange[dragId] = squareReplaced.getAttribute(\"src\");\n    const validMoves = [dragId + 1, dragId - width, dragId - 1, dragId + width];\n    const validMove = validMoves.includes(replaceId);\n    const is4col = checkForFourCol();\n    const is4Row = checkForFourRow();\n    const is3Col = checkForThreeCol();\n    const is3Row = checkForThreeRow();\n    if (replaceId && validMove && (is4col || is4Row || is3Col || is3Row)) {\n      setSquareDragging(null);\n      setSquareReplaced(null);\n    } else {\n      colorsArrange[replaceId] = squareReplaced.getAttribute(\"src\");\n      colorsArrange[dragId] = squareDragging.getAttribute(\"src\");\n      setColorsArrange([...colorsArrange]);\n    }\n  };\n  const createboard = () => {\n    const colorsArray = [];\n    for (let i = 0; i < width * width; i++) {\n      const randColor = Math.floor(Math.random() * colors.length);\n      colorsArray.push(colors[randColor]);\n    }\n    setColorsArrange(colorsArray);\n  };\n  useEffect(() => {\n    createboard();\n  }, []);\n  useEffect(() => {\n    const timer = setInterval(() => {\n      checkForFourCol();\n      checkForFourRow();\n      checkForThreeCol();\n      checkForThreeRow();\n      moveToBelow();\n      setColorsArrange([...colorsArrange]);\n    }, 150);\n    return () => clearInterval(timer);\n  }, [checkForFourCol, checkForFourRow, checkForThreeCol, checkForThreeRow, moveToBelow, colorsArrange]);\n  function toggleDarkMode() {\n    setDarkMode(e => !e);\n  }\n  function toggleReset() {\n    setScore(0);\n    createboard();\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: darkMode ? {\n      backgroundColor: \"black\"\n    } : {\n      backgroundColor: \"white\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"items\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-title\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          style: darkMode ? {\n            color: \"white\"\n          } : {\n            color: \"black\"\n          },\n          children: \"Food Crush\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ScoreBoard, {\n        score: score,\n        darkMode: darkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleDarkMode,\n        className: \"darkModeBtn\",\n        children: darkMode ? \"Light Mode\" : \"Dark Mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleReset,\n        className: \"darkModeBtn\",\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: colorsArrange.map((col, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: col,\n        alt: col,\n        dataid: index,\n        draggable: true,\n        onDragStart: dragStart,\n        onDragOver: e => e.preventDefault(),\n        onDragEnter: e => e.preventDefault(),\n        onDragLeave: e => e.preventDefault(),\n        onDrop: dragDrop,\n        onDragEnd: dragEnd\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"F421E2XOkeDYv4O0jzn2gDoLVGY=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ScoreBoard","Red","Green","Blue","Yellow","Orange","Purple","Blank","jsxDEV","_jsxDEV","width","colors","App","_s","colorsArrange","setColorsArrange","squareDragging","setSquareDragging","squareReplaced","setSquareReplaced","score","setScore","darkMode","setDarkMode","checkForFourCol","i","col","presentColor","isBlank","every","index","s","forEach","checkForFourRow","row","notValid","includes","checkForThreeCol","checkForThreeRow","moveToBelow","firstRow","isFirstRow","randColor","Math","floor","random","length","dragStart","e","target","dragDrop","dragEnd","dragId","parseInt","getAttribute","replaceId","validMoves","validMove","is4col","is4Row","is3Col","is3Row","createboard","colorsArray","push","timer","setInterval","clearInterval","toggleDarkMode","toggleReset","className","style","backgroundColor","children","color","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","src","alt","dataid","draggable","onDragStart","onDragOver","preventDefault","onDragEnter","onDragLeave","onDrop","onDragEnd","_c","$RefreshReg$"],"sources":["D:/WebDev_Projects2023Dec/foodCrush/src/App.js"],"sourcesContent":["import \"./styles.css\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport ScoreBoard from \"./components/ScoreBoard\";\n\nimport Red from \"../src/images/red_apple.png\";\nimport Green from \"./images/potatochip_green.png\";\nimport Blue from \"./images/milk_pack.png\";\nimport Yellow from \"./images/banana.png\";\nimport Orange from \"./images/meat.png\";\nimport Purple from \"./images/egg_white.png\";\nimport Blank from \"./images/blank.png\";\n\nconst width = 8;\nconst colors = [Red, Blue, Yellow, Green, Purple, Orange];\n\nexport default function App() {\n  const [colorsArrange, setColorsArrange] = useState([]);\n  const [squareDragging, setSquareDragging] = useState(null);\n  const [squareReplaced, setSquareReplaced] = useState(null);\n  const [score, setScore] = useState(0);\n  const [darkMode, setDarkMode] = useState(false);\n\n  const checkForFourCol = () => {\n    for (let i = 0; i <= 39; i++) {\n      const col = [i, i + width, i + width * 2, i + width * 3];\n      const presentColor = colorsArrange[i];\n      const isBlank = colorsArrange[i] === Blank;\n      if (\n        col.every((index) => colorsArrange[index] === presentColor) &&\n        !isBlank\n      ) {\n        setScore((s) => s + 4);\n        col.forEach((index) => (colorsArrange[index] = Blank));\n        return true;\n      }\n    }\n  };\n\n  const checkForFourRow = () => {\n    for (let i = 0; i < 64; i++) {\n      const row = [i, i + 1, i + 2, i + 3];\n      const presentColor = colorsArrange[i];\n      const isBlank = colorsArrange[i] === Blank;\n      const notValid = [\n        5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53,\n        54, 55, 62, 63, 64,\n      ];\n\n      if (notValid.includes(i)) continue;\n      if (\n        row.every((index) => colorsArrange[index] === presentColor) &&\n        !isBlank\n      ) {\n        setScore((s) => s + 4);\n        row.forEach((index) => (colorsArrange[index] = Blank));\n        return true;\n      }\n    }\n  };\n\n  const checkForThreeCol = () => {\n    for (let i = 0; i <= 47; i++) {\n      const col = [i, i + width, i + width * 2];\n      const presentColor = colorsArrange[i];\n      const isBlank = colorsArrange[i] === Blank;\n      if (\n        col.every((index) => colorsArrange[index] === presentColor) &&\n        !isBlank\n      ) {\n        setScore((s) => s + 3);\n        col.forEach((index) => (colorsArrange[index] = Blank));\n        return true;\n      }\n    }\n  };\n\n  const checkForThreeRow = () => {\n    for (let i = 0; i < 64; i++) {\n      const row = [i, i + 1, i + 2];\n      const presentColor = colorsArrange[i];\n      const isBlank = colorsArrange[i] === Blank;\n      const notValid = [\n        6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64,\n      ];\n\n      if (notValid.includes(i)) continue;\n      if (\n        row.every((index) => colorsArrange[index] === presentColor) &&\n        !isBlank\n      ) {\n        setScore((s) => s + 3);\n        row.forEach((index) => (colorsArrange[index] = Blank));\n        return true;\n      }\n    }\n  };\n\n  const moveToBelow = () => {\n    for (let i = 0; i <= 55; i++) {\n      const firstRow = [0, 1, 2, 3, 4, 5, 6, 7];\n      const isFirstRow = firstRow.includes(i);\n      if (isFirstRow && colorsArrange[i] === Blank) {\n        const randColor = Math.floor(Math.random() * colors.length);\n        colorsArrange[i] = colors[randColor];\n      }\n      if (colorsArrange[i + width] === Blank) {\n        colorsArrange[i + width] = colorsArrange[i];\n        colorsArrange[i] = Blank;\n      }\n    }\n  };\n\n  const dragStart = (e) => {\n    setSquareDragging(e.target);\n  };\n\n  const dragDrop = (e) => {\n    setSquareReplaced(e.target);\n  };\n\n  const dragEnd = () => {\n    const dragId = parseInt(squareDragging.getAttribute(\"dataid\"));\n    const replaceId = parseInt(squareReplaced.getAttribute(\"dataid\"));\n\n    colorsArrange[replaceId] = squareDragging.getAttribute(\"src\");\n    colorsArrange[dragId] = squareReplaced.getAttribute(\"src\");\n\n    const validMoves = [dragId + 1, dragId - width, dragId - 1, dragId + width];\n\n    const validMove = validMoves.includes(replaceId);\n\n    const is4col = checkForFourCol();\n    const is4Row = checkForFourRow();\n    const is3Col = checkForThreeCol();\n    const is3Row = checkForThreeRow();\n\n    if (replaceId && validMove && (is4col || is4Row || is3Col || is3Row)) {\n      setSquareDragging(null);\n      setSquareReplaced(null);\n    } else {\n      colorsArrange[replaceId] = squareReplaced.getAttribute(\"src\");\n      colorsArrange[dragId] = squareDragging.getAttribute(\"src\");\n      setColorsArrange([...colorsArrange]);\n    }\n  };\n\n  const createboard = () => {\n    const colorsArray = [];\n\n    for (let i = 0; i < width * width; i++) {\n      const randColor = Math.floor(Math.random() * colors.length);\n      colorsArray.push(colors[randColor]);\n    }\n    setColorsArrange(colorsArray);\n  };\n\n  useEffect(() => {\n    createboard();\n  }, []);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      checkForFourCol();\n      checkForFourRow();\n      checkForThreeCol();\n      checkForThreeRow();\n      moveToBelow();\n      setColorsArrange([...colorsArrange]);\n    }, 150);\n    return () => clearInterval(timer);\n  }, [\n    checkForFourCol,\n    checkForFourRow,\n    checkForThreeCol,\n    checkForThreeRow,\n    moveToBelow,\n    colorsArrange,\n  ]);\n\n  function toggleDarkMode() {\n    setDarkMode((e) => !e);\n  }\n\n  function toggleReset() {\n    setScore(0);\n    createboard();\n  }\n  return (\n    <div\n      className=\"App\"\n      style={\n        darkMode ? { backgroundColor: \"black\" } : { backgroundColor: \"white\" }\n      }\n    >\n      <div className=\"items\">\n        <div className=\"game-title\">\n          <h1 style={darkMode ? { color: \"white\" } : { color: \"black\" }}>\n            Food Crush\n          </h1>\n        </div>\n        <ScoreBoard score={score} darkMode={darkMode} />\n        <button onClick={toggleDarkMode} className=\"darkModeBtn\">\n          {darkMode ? \"Light Mode\" : \"Dark Mode\"}\n        </button>\n        <button onClick={toggleReset} className=\"darkModeBtn\">\n          Reset\n        </button>\n      </div>\n      <div className=\"game\">\n        {colorsArrange.map((col, index) => (\n          <img\n            key={index}\n            src={col}\n            alt={col}\n            dataid={index}\n            draggable={true}\n            onDragStart={dragStart}\n            onDragOver={(e) => e.preventDefault()}\n            onDragEnter={(e) => e.preventDefault()}\n            onDragLeave={(e) => e.preventDefault()}\n            onDrop={dragDrop}\n            onDragEnd={dragEnd}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}